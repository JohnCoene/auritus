paste0(as.numeric(Sys.time()))
library(auritus)
library(auritus)
x <- Sys.time()
as.numeric(x)
paste(as.numeric(x))
paste(as.character(as.numeric(x)))
(x <- as.numeric(Sys.time()))
paste(x)
paste(as.character(x))
paste0("crawled:>", as.character(as.numeric(Sys.time())), "000")
as.integer(Sys.time())
paste0("crawled:>", as.character(as.integer(Sys.time())), "000")
x <- as.numeric(Sys.time())
(x <- as.numeric(Sys.time()))
paste(x)
(x <- as.integer(Sys.time()))
paste(x)
(x <- Sys.time())
as.numeric(x)
paste(as.numeric(x))
paste(as.integer(x))
library(auritus)
devtools::document()
library(auritus)
setup_auritus(pages = 2)
pool <- pool::dbPool(RSQLite::SQLite(), dbname = "articles")
ts_query <- tryCatch(
dbGetQuery(con, "SELECT MAX(crawled) FROM 'articles';"),
error = function(e) e
)
ts_query <- tryCatch(
dbGetQuery(pool, "SELECT MAX(crawled) FROM 'articles';"),
error = function(e) e
)
ts_query
ts_query <- tryCatch(
DBI::dbGetQuery(pool, "SELECT MAX(crawled) FROM 'articles';"),
error = function(e) e
)
ts_query
crawled <- paste0("crawled:>", as.character(as.integer(ts_query)), "000")
crawled
crawled <- paste0("crawled:>", as.character(as.integer(ts_query[[1]])), "000")
ts_query[[1]]
class(ts_query[[1]])
ts_query <- tryCatch(
DBI::dbGetQuery(pool, "SELECT MAX(crawled) FROM 'articles';"),
error = function(e) e
)
class(ts_query[[1]])
ts_query[[1]]
as.POSIXct(ts_query[[1]], origin = "1970-01-01 12:00")
if(inherits(ts_query, "numeric") || inherits(ts_query, "character"))
ts_query[[1]] <- as.POSIXct(ts_query[[1]], origin = "1970-01-01 12:00")
ts_query[[1]]
crawled <- paste0("crawled:>", as.character(as.integer(ts_query[[1]])), "000")
ts_query <- tryCatch(
DBI::dbGetQuery(pool, "SELECT MAX(crawled) FROM 'articles';"),
error = function(e) e
)
ts_query
ts_query <- tryCatch(
DBI::dbGetQuery(pool, "SELECT MAX(crawled) AS max FROM 'articles';") %>% pull(max),
error = function(e) e
)
ts_query
ts_query <- tryCatch(
DBI::dbGetQuery(pool, "SELECT MAX(crawled) AS max FROM 'articles';") %>% dplyr::pull(max),
error = function(e) e
)
ts_query
inherits(ts_query, "numeric") || inherits(ts_query, "character")
ts_query <- as.POSIXct(ts_query, origin = "1970-01-01 12:00")
crawled <- paste0("crawled:>", as.character(as.integer(ts_query)), "000")
crawled
devtools::document()
library(auritus)
setup_auritus(pages = 1)
crawl_data()
launch_auritus()
ts_query <- tryCatch(
DBI::dbGetQuery(pool, "SELECT MAX(crawled) AS max FROM 'articles';") %>% dplyr::pull(max),
error = function(e) e
)
ts_query
library(auritus)
devtools::document()
library(auritus)
setup_auritus()
setup_auritus(pages = 2)
launch_auritus()
crawl_data(pages = 50)
launch_auritus()
library(auritus)
setup_auritus()
cat(crayon::black(cli::symbol$pointer), "hasd")
cat(crayon::blue(cli::symbol$pointer), "hasd")
devtools::document()
library(auritus)
setup_auritus()
launch_auritus()
library(auritus)
launch_auritus()
setup_auritus()
launch_auritus()
setup_auritus(pages = 50)
setup_auritus(pages = 50)
library(auritus)
setup_auritus(pages = 50)
launch_auritus()
library(profvis)
profvis(auritus::launch_auritus())
profvis({auritus::launch_auritus()})
library(auritus)
launch_auritus()
auritus::launch_auritus()
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
profvis({launch_auritus()})
library(auritus)
launch_auritus()
launch_auritus()
library(auritus)
launch_auritus()
devtools::document()
devtools::document()
library(auritus)
setup_auritus(pages = 100)
launch_auritus()
ui <- fluidPage(sidebarLayout(
sidebarPanel(
sliderInput("controller", "Controller", 1, 3, 1)
),
mainPanel(
tabsetPanel(id = "inTabset",
tabPanel(title = "Panel 1", value = "panel1", "Panel 1 content"),
tabPanel(title = "Panel 2", value = "panel2", "Panel 2 content"),
tabPanel(title = "Panel 3", value = "panel3", "Panel 3 content")
)
)
))
server <- function(input, output, session) {
observeEvent(input$controller, {
updateTabsetPanel(session, "inTabset",
selected = paste0("panel", input$controller)
)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(id = "sidebarmenu",
menuItem("A", tabName = "a",  icon = icon("group", lib="font-awesome")),
menuItem("B", tabName = "b", icon = icon("check-circle", lib = "font-awesome")),
conditionalPanel("input.sidebarmenu == 'a'",
uiOutput('A_panel')
),
conditionalPanel("input.sidebarmenu == 'b'",
uiOutput('B_panel')
)
),
sliderInput("x", "Outside of menu", 1, 100, 50)
),
dashboardBody()
)
server <- function(input, output) {
output$A_panel <- renderUI({
if(input$sidebarmenu != "a") return()
cat('Inside A Panel \n')
sliderInput("b", "Under A", 1, 100, 50)
})
output$B_panel <- renderUI({
if(input$sidebarmenu != "b") return()
cat('Inside B Panel \n')
sliderInput("b", "Under B", 1, 100, 50)
})
}
shinyApp(ui, server)
pool <- pool::dbPool(RSQLite::SQLite(), dbname = "articles")
df <- DBI::dbGetQuery(pool, "SELECT * FROM articles LIMIT 100;")
pool::poolClose(pool)
names(df)
devtools::document()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
#' Parse dates
#' @param x A character vector.
#' @note Someone take care of this I suck with date/time stuff.
.parse_dates <- function(x){
x <- gsub(".000+.*", "", x)
x <- gsub("T", " ", x)
x <- as.POSIXct(x, "%Y-%m-%d %H:%M:%S")
return(x)
}
#' Preprocess results of webhose.io
#' @param dat Data as returned by webhoser.
.preproc_crawl <- function(dat){
dat$published <- webhoserx::whe_date(dat$published)
dat$thread.published <- webhoserx::whe_date(dat$thread.published)
dat$crawled <- webhoserx::whe_date(dat$crawled)
return(dat)
}
#' Convertes segements list into a data.frame
#' @param settings raw \code{yml} list
.segments2df <- function(settings){
segments <- suppressWarnings(
purrr::map_df(settings$segments, as.data.frame)
)
names(segments) <- gsub("segment\\.", "", names(segments))
return(segments)
}
#' Segment to valid column name
#' @param x A segment name
.segment2name <- function(x){
x <- iconv(x, from = "UTF-8", to = "ASCII//TRANSLIT")
x <- gsub("[[:space:]]|[[:cntrl:]]|[[:blank:]]|[[:punct:]]", "", x)
tolower(x)
}
#' Segment
#' @param data data as returned by crawl.
#' @param segments segments data.frame.
#' @param id query id.
.segment <- function(data, segments, id){
relevant_segments <- segments %>%
filter(segments$quer == id)
if(nrow(relevant_segments)){
for(i in 1:nrow(relevant_segments)){
nm <- .segment2name(relevant_segments$name[i])
nm_title <- paste0(nm, "_title_segment")
nm_text <- paste0(nm, "_text_segment")
nm_1p <- paste0(nm, "_1p_segment")
nm_total <- paste0(nm, "_total_segment")
data <- data %>%
webhoserx::whe_search_1p(relevant_segments$regex[[i]], nm_1p) %>%
webhoserx::whe_search(relevant_segments$regex[[i]], nm_title, "thread.title") %>%
webhoserx::whe_search(relevant_segments$regex[[i]], nm_text, "text")
data[[nm_total]] <- data[[nm_text]] + data[[nm_text]]
}
}
return(data)
}
"%||%" <- function(x, y) {
if (length(x) > 0 || !is.null(x)) x else y
}
#' Get echarts4r theme
.get_theme <- function(){
getOption("echarts4r_theme")
}
#' Get font
.font <- function(){
getOption("font")
}
#' Convert type to driver
#' @param x a type as specified in \code{_auritus.yml}
.type2drv <- function(x){
DRV <- NULL
if(x == "Postgres")
DRV <- RPostgres::Postgres()
else if (x == "MySQL")
DRV <- RMySQL::MySQL()
else if(x == "MariaDB")
DRV <- RMariaDB::MariaDB()
else if(x == "SQLite")
DRV <- RSQLite::SQLite()
return(DRV)
}
#' Make site type query
#' @param input shiny site type input
.type2query <- function(input){
paste(
"AND thread_site_type IN(",
paste0(
"'",
paste(input, collapse = "','"),
"'"
)
, ")"
)
}
#' Date to query
#' @param dates Date range
.dates2query <- function(dates){
paste0(
"WHERE published >= '", dates[1], " 00:00:00' AND published <= '", dates[2], " 23:59:59'"
)
}
#' Segment selection to query
#' @param input Segment selected choices.
#' @param type Segment type.
.select_segments <- function(input, type = "text"){
x <- .segment2name(input)
paste(
paste0(x, "_", type, "_segment"),
collapse = ", "
)
}
input <- list(
daterangeOut = c(Sys.Date() - 15, Sys.Date())
)
input <- list(
daterangeOut = c(Sys.Date() - 15, Sys.Date()),
sitetypesOut = "news",
segmentsOut = c("rose", "white")
)
dates <- input$daterangeOut
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
segment_query <- .select_segments(input$segmentsOut, type = "total")
query <- paste0(
"SELECT ", segment_query, ", thread_site FROM 'articles' ", date_query, type_query, ";"
)
query
dat <- DBI::dbGetQuery(pool, query)
pool <- pool::dbPool(RSQLite::SQLite(), dbname = "articles")
dat <- DBI::dbGetQuery(pool, query)
head(dat)
dat %>%
count(countains("total"), thread_site)
library(dplyr)
dat %>%
count(countains("total"), thread_site)
dat %>%
count(contains("total"), thread_site)
dat %>%
group_by(contains("total"), thread_site) %>%
summarise(
n = n()
)
?contains
dat %>%
group_by(contains("total"))
names(dat)
dat %>%
group_by(ends_with("_total_segment")) %>%
summarise(
n = n()
)
dat %>% select(ends_with("_total_segment"))
dat %>% select(ends_with("_total_segment")) %>% head
dat %>% group_by(ends_with("_total_segment")) %>% head
dat %>% count(everything())
head(dat)
mtcars %>% count(everything())
dat %>%
group_by_(ends_with("_total_segment")) %>%
summarise(
n = n()
)
dat %>%
group_by(ends_with("total_")) %>%
summarise(
n = n()
)
head(cars)
cars %>% group_by(contains("speed"))
contains("speed")
dat %>% tidyr::gather(contains("total_"))
dat %>% tidyr::gather(seg, v, contains("total_"))
?group_by
names(dat)[grepl("total", names(dart))]
names(dat)[grepl("total", names(dat))]
vars <- names(dat)[grepl("total", names(dat))]
dat %>%
group_by_(vars) %>%
summarise(
n = n()
)
c^^vars
vars
dat %>%
group_by_(one_of(vars)) %>%
summarise(
n = n()
)
vars <- names(dat)[grepl("total", names(dat))]
dat %>%
group_by_(one_of(vars))
vars
head(dat)
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
head
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
mutate(
value = case_when(
value > 0 ~ 1,
TRUE ~ 0
)
)
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
mutate(
value = case_when(
value > 0 ~ 1,
TRUE ~ 0
)
) %>%
head
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
filter(value != 0) %>%
head
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
filter(value > 0) %>%
head
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
filter(value > 0) %>%
count(thread_site, segments)
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
filter(value > 0) %>%
count(thread_site, segments) -> n_outlets
n_outlets %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(value)
library(echarts4r)
n_outlets %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(value)
head(n_outlets)
n_outlets %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(n)
n_outlets %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(n, stack = TRUE)
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
filter(value > 0) %>%
count(thread_site, segments) %>%
arrange(-n) %>%
slice(1:150)
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
filter(value > 0) %>%
count(thread_site, segments) %>%
arrange(-n) %>%
slice(1:150) -> n_outlets
n_outlets %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(n, stack = TRUE)
n_outlets() %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(value) %>%
e_tooltip(trigger = "axis") %>%
e_theme(THEME) %>%
e_text_style(fontFamily = .font()) %>%
e_toolbox_feature(feature = "saveAsImage")
n_outlets %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(value) %>%
e_tooltip(trigger = "axis") %>%
e_theme(THEME) %>%
e_text_style(fontFamily = .font()) %>%
e_toolbox_feature(feature = "saveAsImage")
