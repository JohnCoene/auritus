segments,
value,
contains("total_")
) %>%
filter(value != 0) %>%
head
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
filter(value > 0) %>%
head
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
filter(value > 0) %>%
count(thread_site, segments)
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
filter(value > 0) %>%
count(thread_site, segments) -> n_outlets
n_outlets %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(value)
library(echarts4r)
n_outlets %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(value)
head(n_outlets)
n_outlets %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(n)
n_outlets %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(n, stack = TRUE)
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
filter(value > 0) %>%
count(thread_site, segments) %>%
arrange(-n) %>%
slice(1:150)
dat %>%
tidyr::gather(
segments,
value,
contains("total_")
) %>%
filter(value > 0) %>%
count(thread_site, segments) %>%
arrange(-n) %>%
slice(1:150) -> n_outlets
n_outlets %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(n, stack = TRUE)
n_outlets() %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(value) %>%
e_tooltip(trigger = "axis") %>%
e_theme(THEME) %>%
e_text_style(fontFamily = .font()) %>%
e_toolbox_feature(feature = "saveAsImage")
n_outlets %>%
group_by(segments) %>%
e_charts(thread_site) %>%
e_bar(value) %>%
e_tooltip(trigger = "axis") %>%
e_theme(THEME) %>%
e_text_style(fontFamily = .font()) %>%
e_toolbox_feature(feature = "saveAsImage")
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
library(auritus)
launch_auritus()
library(auritus)
library(auritus)
launch_auritus()
devtools::document()
launch_auritus()
crawl_data()
?crawl_data()
library(auritus)
launch_auritus()
launch_auritus()
launch_auritus()
library(echarts4r)
conf$general$currency
library(topicmodels)
install.packages("topicmodels")
data("AssociatedPress")
library(topicmodels)
data("AssociatedPress")
ap_lda <- LDA(AssociatedPress, k = 2, control = list(seed = 1234))
library(auritus)
crawl_data()
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
?e_group
devtools::document()
library(auritus)
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
pool <- pool::dbPool(RSQLite::SQLite(), dbname = "articles")
input <- list(
daterangeOut = c(Sys.Date() - 20, Sys.Date())
)
input <- list(
daterangeOut = c(Sys.Date() - 20, Sys.Date()),
sitetypesOut = c("news", "blogs")
)
#' Parse dates
#' @param x A character vector.
#' @note Someone take care of this I suck with date/time stuff.
.parse_dates <- function(x){
x <- gsub(".000+.*", "", x)
x <- gsub("T", " ", x)
x <- as.POSIXct(x, "%Y-%m-%d %H:%M:%S")
return(x)
}
#' Preprocess results of webhose.io
#' @param dat Data as returned by webhoser.
.preproc_crawl <- function(dat){
dat$published <- webhoserx::whe_date(dat$published)
dat$thread.published <- webhoserx::whe_date(dat$thread.published)
dat$crawled <- webhoserx::whe_date(dat$crawled)
return(dat)
}
#' Convertes segements list into a data.frame
#' @param settings raw \code{yml} list
.segments2df <- function(settings){
segments <- suppressWarnings(
purrr::map_df(settings$segments, as.data.frame)
)
names(segments) <- gsub("segment\\.", "", names(segments))
return(segments)
}
#' Segment to valid column name
#' @param x A segment name
.segment2name <- function(x){
x <- iconv(x, from = "UTF-8", to = "ASCII//TRANSLIT")
x <- gsub("[[:space:]]|[[:cntrl:]]|[[:blank:]]|[[:punct:]]", "", x)
tolower(x)
}
#' Segment
#' @param data data as returned by crawl.
#' @param segments segments data.frame.
#' @param id query id.
.segment <- function(data, segments, id){
relevant_segments <- segments %>%
filter(segments$quer == id)
if(nrow(relevant_segments)){
for(i in 1:nrow(relevant_segments)){
nm <- .segment2name(relevant_segments$name[i])
nm_title <- paste0(nm, "_title_segment")
nm_text <- paste0(nm, "_text_segment")
nm_1p <- paste0(nm, "_1p_segment")
nm_total <- paste0(nm, "_total_segment")
data <- data %>%
webhoserx::whe_search_1p(relevant_segments$regex[[i]], nm_1p) %>%
webhoserx::whe_search(relevant_segments$regex[[i]], nm_title, "thread.title") %>%
webhoserx::whe_search(relevant_segments$regex[[i]], nm_text, "text")
data[[nm_total]] <- data[[nm_text]] + data[[nm_text]]
}
}
return(data)
}
"%||%" <- function(x, y) {
if (length(x) > 0 || !is.null(x)) x else y
}
#' Get echarts4r theme
.get_theme <- function(){
getOption("echarts4r_theme")
}
#' Get font
.font <- function(){
getOption("font")
}
#' Convert type to driver
#' @param x a type as specified in \code{_auritus.yml}
.type2drv <- function(x){
DRV <- NULL
if(x == "Postgres")
DRV <- RPostgres::Postgres()
else if (x == "MySQL")
DRV <- RMySQL::MySQL()
else if(x == "MariaDB")
DRV <- RMariaDB::MariaDB()
else if(x == "SQLite")
DRV <- RSQLite::SQLite()
return(DRV)
}
#' Make site type query
#' @param input shiny site type input
.type2query <- function(input){
paste(
"AND thread_site_type IN(",
paste0(
"'",
paste(input, collapse = "','"),
"'"
)
, ")"
)
}
#' Date to query
#' @param dates Date range
.dates2query <- function(dates){
paste0(
"WHERE published >= '", dates[1], " 00:00:00' AND published <= '", dates[2], " 23:59:59'"
)
}
#' Segment selection to query
#' @param input Segment selected choices.
#' @param type Segment type.
.select_segments <- function(input, type = "text"){
x <- .segment2name(input)
paste(
paste0(x, "_", type, "_segment"),
collapse = ", "
)
}
base_query <- "SELECT thread_site, COUNT(thread_site) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(base_query, date_query, type_query,
"GROUP BY thread_site  HAVING COUNT(thread_site) > 1 ORDER BY count(thread_site) DESC LIMIT 1;")
dbGetQuery(pool, query)
DBI::dbGetQuery(pool, query)
pool::poolClose(poo)
pool::poolClose(pool)
devtools::document()
library(auritus)
launch_auritus()
?DBI::dbConnect
devtools::document()
install.packages("RPostgrSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
pool <- pool::dbPool(RPostgreSQL::PostgreSQL(), dbname = "articles", host = "localhost", user = "postgres", password = "")
pool <- pool::dbPool(RPostgreSQL::PostgreSQL(), dbname = "articles", host = "localhost", user = "psql", password = "")
pool <- pool::dbPool(RPostgreSQL::PostgreSQL(), dbname = "articles", host = "localhost", user = "jcoe", password = "")
DBI::dbListTables(pool)
pool::poolClose(pool)
devtools::document()
library(auritus)
library(auritus)
setup_auritus(pages = 100)
pool <- pool::dbPool(RPostgreSQL::PostgreSQL(), dbname = "articles", host = "localhost", user = "jcoe", password = "")
DBI::dbListTables(pool)
pool::poolClose(pool)
launch_auritus()
pool <- pool::dbPool(RPostgreSQL::PostgreSQL(), dbname = "articles", host = "localhost", user = "jcoe", password = "")
query <- "SELECT MIN(published) AS min, MAX(published) AS max FROM articles;"
library(DBI)
e
range <- dbGetQuery(pool, query) %>%
unname() %>%
unlist()
range
dat <- dbGetQuery(pool, "SELECT * FROM articles LIMIT 1;")
nrow(dat)
dat <- dbGetQuery(pool, "SELECT * FROM articles LIMIT 100;")
head(dat$published)
query <- "SELECT MIN(published), MAX(published) FROM articles;"
range <- dbGetQuery(pool, query) %>%
unname() %>%
unlist()
range
inherits(range, "numeric")
range <- as.POSIXct(range, origin = "29170-01-01 12:00")
range
as.POSIXct(range, origin = "29170-01-01 12:00")
as.POSIXct(range, origin = "1970-01-01 12:00")
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
latest <- dbGetQuery(pool, "SELECT MAX(published) FROM 'articles';") %>%
unlist() %>%
unname()
library(auritus)
launch_auritus()
pool <- pool::dbPool(RPostgreSQL::PostgreSQL(), dbname = "articles", host = "localhost", user = "jcoe", password = "")
latest <- dbGetQuery(pool, "SELECT MAX(published) FROM 'articles';") %>%
unlist() %>%
unname()
latest <- dbGetQuery(pool, "SELECT MAX(published) FROM articles;") %>%
unlist() %>%
unname()
latest <- as.POSIXct(latest, origin = "1970-01-01 12:00")
latest <- as.Date(latest)
textillate::textillate(
format(latest, "%d %B %Y"),
min.display.time = 5000
) %>%
textillate::textillateIn(
effect = "rollIn",
shuffle = TRUE
)
pool::poolClose(pool)
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
launch_auritus()
pool <- pool::dbPool(RPostgreSQL::PostgreSQL(), dbname = "articles", host = "localhost", user = "jcoe", password = "")
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
segment_query <- .select_segments(input$segmentsOut, type = "text")
query <- paste0(
"SELECT published, ", segment_query, " FROM 'articles' ", date_query, type_query, ";"
)
published <- dbGetQuery(pool, query)
query <- paste0(
"SELECT published, ", segment_query, " FROM articles ", date_query, type_query, ";"
)
published <- dbGetQuery(pool, query)
pool::poolClose(pool)
library(auritus)
launch_auritus()
pool <- pool::dbPool(RPostgreSQL::PostgreSQL(), dbname = "articles", host = "localhost", user = "jcoe", password = "")
base_query <- "SELECT thread_site, COUNT(DISTINCT thread_site) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(
base_query, date_query, type_query, ";"
)
query
N <- dbGetQuery(pool, query) %>%
pull(n)
base_query <- "SELECT 'thread_site', COUNT(DISTINCT 'thread_site') AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(
base_query, date_query, type_query, ";"
)
N <- dbGetQuery(pool, query) %>%
pull(n)
library(dplyr)
N <- dbGetQuery(pool, query) %>%
pull(n)
N
base_query <- 'SELECT "thread_site", COUNT(DISTINCT "thread_site") AS n FROM articles'
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(
base_query, date_query, type_query, ";"
)
N <- dbGetQuery(pool, query) %>%
pull(n)
base_query <- "SELECT thread_site, COUNT(DISTINCT thread_site) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(
base_query, date_query, type_query, ";"
)
dbGetQuery(pool, query)
base_query <- "SELECT COUNT(DISTINCT thread_site) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(
base_query, date_query, type_query, ";"
)
N <- dbGetQuery(pool, query) %>%
pull(n)
N
base_query <- "SELECT thread_site, COUNT(thread_site) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(base_query, date_query, type_query,
"GROUP BY thread_site  HAVING COUNT(thread_site) > 1 ORDER BY count(thread_site) DESC LIMIT 1;")
dbGetQuery(pool, query) %>%
mutate(
thread_site = gsub("\\..*", "", thread_site)
)
base_query <- "SELECT COUNT(language) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(
base_query, date_query, type_query, ";"
)
N <- dbGetQuery(pool, query) %>%
pull(language)
base_query <- "SELECT COUNT(language) AS language FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(
base_query, date_query, type_query, ";"
)
N <- dbGetQuery(pool, query) %>%
pull(language)
N
base_query <- "SELECT language, COUNT(language) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(
base_query, date_query, type_query, ";"
)
N <- dbGetQuery(pool, query) %>%
pull(language)
query
base_query <- "SELECT language AS language, COUNT(language) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(
base_query, date_query, type_query, ";"
)
N <- dbGetQuery(pool, query) %>%
pull(language)
base_query <- "SELECT language AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(
base_query, date_query, type_query, ";"
)
N <- dbGetQuery(pool, query) %>%
pull(language)
N <- dbGetQuery(pool, query)
head(N)
base_query <- "SELECT language, COUNT(language) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(
base_query, date_query, type_query, "GROUP BY language;"
)
N <- dbGetQuery(pool, query)
N
base_query <- "SELECT COUNT(DISTINCT thread_site) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(
base_query, date_query, type_query, ";"
)
N <- dbGetQuery(pool, query)
N
pool::poolClose(pool)
library(auritus)
launch_auritus()
profvis::profvis(launch_auritus())
install.packages("RPostgres")
devtools::document()
library(auritus)
launch_auritus()
library(auritus)
devtools::document()
launch_auritus()
library(auritus)
launch_auritus()
devtools::document()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
launch_auritus()
devtools::document()
library(auritus)
launch_auritus()
DRV <- RSQLite::SQLite()
class(DRV)
devtools::document()
library(auritus)
launch_auritus()
launch_auritus()
launch_auritus()
library(auritus)
?remotes::install_github
devtools::document()
devtools::check()
install.packages("RMySQL")
install.packages("RMariaDB")
devtools::document()
devtools::check()
library(auritus)
usethis::use_travis()
