purrr::map(settings$segments, as.data.frame) %>%
purrr::map_df(bind_rows)
library(echarts4r)
purrr::map(settings$segments, as.data.frame) %>%
purrr::map_df(bind_rows)
purrr::map(settings$segments, as.data.frame) %>%
purrr::map_df(dplyr::bind_rows)
segments <- settings$segments %>%
purrr::map(as.data.frame) %>%
purrr::map_df(bind_rows)
library(dplyr)
segments <- settings$segments %>%
purrr::map(as.data.frame) %>%
purrr::map_df(bind_rows)
segments
segments <- suppressWarnings(
settings$segments %>%
purrr::map(as.data.frame) %>%
purrr::map_df(bind_rows)
)
#' @param x A segment name
.segment2name <- function(x){
gsub("[[:space:]]|[[:cntrl:]]|[[:blank:]]|[[:punct:]]", "", x)
}
.segment2name <- function(x){
gsub("[[:space:]]|[[:cntrl:]]|[[:blank:]]|[[:punct:]]", "", x)
}
segment_names <- .segment2name(segments$segment.name)
segment_names
icon(segment_names)
icov(segment_names)
iconv(segment_names)
iconv(segment_names, to = "segment_names")
iconv(segment_names, to = "ASCII//TRANSLIT")
iconv(segment_names, to = "UTF-8")
iconv(segment_names, to = "ASCII")
iconv(segment_names, to = "TRANSLIT")
iconv(segment_names, to = "ASCII//TRANSLIT")
Encoding(segment_names)
iconv(segment_names, from = "UTF-8", to = "ASCII//TRANSLIT")
iconv(segment_names, from = "UTF-8", to = "ASCII//TRANSLIT") -> x
x <- gsub("[[:space:]]|[[:cntrl:]]|[[:blank:]]|[[:punct:]]", "", x)
tolower(x)
paste0(tolower(x), "_title_segment")
devtools::document()
paste0(tolower(x), "_title_segment", "ss")
library(auritus)
setup_auritus()
setup_auritus()
pool::poolClose(pool)
err <- tryCatch(head(), error = function(e) e)
err
cat(err)
print(err)
err$message
cat(err$message)
devtools::document()
library(auritus)
head(df)
pool <- pool::dbPool(RSQLite::SQLite(), dbname = "articles")
df <- DBI::dbGetQuery(pool, "SELECT * FROM articles LIMIT 100;")
pool::poolClose(pool)
names(df)
devtools::document()
library(auritus)
pool::poolClose(pool)
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
llaunch_auritus()
launch_auritus()
devtools::document()
library(auritus)
llaunch_auritus()
launch_auritus()
library(auritus)
launch_auritus()
e_toolbox_feature
?e_toolbox_feature
devtools::document()
library(auritus)
llaunch_auritus()
launch_auritus()
library(auritus)
launch_auritus()
segment_names <- .segment2name(segments$segment.name)
segment_names
segments <- settings$segments %>%
purrr::map(as.data.frame) %>%
purrr::map_df(bind_rows)
segments
devtools::document()
library(auritus)
llaunch_auritus()
launch_auritus()
library(auritus)
launch_auritus()
names(df)
segment_names
#' Segment to valid column name
#' @param x A segment name
.segment2name <- function(x){
x <- iconv(x, from = "UTF-8", to = "ASCII//TRANSLIT")
x <- gsub("[[:space:]]|[[:cntrl:]]|[[:blank:]]|[[:punct:]]", "", x)
tolower(x)
}
segments <- suppressWarnings(
settings$segments %>%
purrr::map(as.data.frame) %>%
purrr::map_df(bind_rows)
)
segment_names <- .segment2name(segments$segment.name)
segment_names
names(df)
segments_names <- segments_names
segments_names <- segment_names
segments_names
paste0(segments_names, "_text_segment")
paste0(
paste0(segments_names, "_text_segment"),
collapse = ";"
)
paste(
paste0(segments_names, "_text_segment"),
collapse = ","
)
paste(
paste0(segments_names, "_text_segment"),
collapse = ", "
)
segments <- suppressWarnings(
settings$segments %>%
purrr::map(as.data.frame) %>%
purrr::map_df(bind_rows)
)
segments
pool <- pool::dbPool(RSQLite::SQLite(), dbname = "articles")
#' Parse dates
#' @param x A character vector.
#' @note Someone take care of this I suck with date/time stuff.
.parse_dates <- function(x){
x <- gsub(".000+.*", "", x)
x <- gsub("T", " ", x)
x <- as.POSIXct(x, "%Y-%m-%d %H:%M:%S")
return(x)
}
#' Preprocess results of webhose.io
#' @param dat Data as returned by webhoser.
.preproc_crawl <- function(dat){
dat$published <- webhoserx::whe_date(dat$published)
dat$thread.published <- webhoserx::whe_date(dat$thread.published)
dat$crawled <- webhoserx::whe_date(dat$crawled)
return(dat)
}
#' Convertes segements list into a data.frame
#' @param settings raw \code{yml} list
.segments2df <- function(settings){
segments <- suppressWarnings(
purrr::map_df(settings$segments, as.data.frame)
)
names(segments) <- gsub("segment\\.", "", names(segments))
return(segments)
}
#' Segment to valid column name
#' @param x A segment name
.segment2name <- function(x){
x <- iconv(x, from = "UTF-8", to = "ASCII//TRANSLIT")
x <- gsub("[[:space:]]|[[:cntrl:]]|[[:blank:]]|[[:punct:]]", "", x)
tolower(x)
}
#' Segment
#' @param data data as returned by crawl.
#' @param segments segments data.frame.
#' @param id query id.
.segment <- function(data, segments, id){
relevant_segments <- segments %>%
filter(segments$quer == id)
if(nrow(relevant_segments)){
for(i in 1:nrow(relevant_segments)){
nm <- .segment2name(relevant_segments$name[i])
nm_title <- paste0(nm, "_title_segment")
nm_text <- paste0(nm, "_text_segment")
nm_1p <- paste0(nm, "_1p_segment")
nm_total <- paste0(nm, "_total_segment")
data <- data %>%
webhoserx::whe_search_1p(relevant_segments$regex[[i]], nm_1p) %>%
webhoserx::whe_search(relevant_segments$regex[[i]], nm_title, "thread.title") %>%
webhoserx::whe_search(relevant_segments$regex[[i]], nm_text, "text")
data[[nm_total]] <- data[[nm_text]] + data[[nm_text]]
}
}
return(data)
}
"%||%" <- function(x, y) {
if (length(x) > 0 || !is.null(x)) x else y
}
#' Get echarts4r theme
.get_theme <- function(){
getOption("echarts4r_theme")
}
#' Get font
.font <- function(){
getOption("font")
}
#' Convert type to driver
#' @param x a type as specified in \code{_auritus.yml}
.type2drv <- function(x){
DRV <- NULL
if(x == "Postgres")
DRV <- RPostgres::Postgres()
else if (x == "MySQL")
DRV <- RMySQL::MySQL()
else if(x == "MariaDB")
DRV <- RMariaDB::MariaDB()
else if(x == "SQLite")
DRV <- RSQLite::SQLite()
return(DRV)
}
#' Make site type query
#' @param input shiny site type input
.type2query <- function(input){
paste(
"AND thread_site_type IN(",
paste0(
"'",
paste(input, collapse = "','"),
"'"
)
, ")"
)
}
#' Date to query
#' @param dates Date range
.dates2query <- function(dates){
paste0(
"WHERE published >= '", dates[1], " 00:00:00' AND published <= '", dates[2], " 23:59:59'"
)
}
#' Segment selection to query
#' @param input Segment selected choices.
#' @param type Segment type.
.select_segments <- function(input, type = "text"){
x <- .segment2name(input)
paste(
paste0(x, "_", type, "_segment"),
collapse = ", "
)
}
input <- list(
sitetypesOut = c("news", "blogs")
)
input <- list(
sitetypesOut = c("news", "blogs"),
daterangeOut = c(Sys.Date() - 20, Sys.Date())
)
input <- list(
sitetypesOut = c("news", "blogs"),
daterangeOut = c(Sys.Date() - 20, Sys.Date())
)
input <- list(
sitetypesOut = c("news", "blogs"),
daterangeOut = c(Sys.Date() - 20, Sys.Date()),
segmentsOut = c("rose", "white")
)
query <- paste0(
"SELECT query_name, published ", segment_query, " FROM 'articles' ", date_query, type_query, ";"
)
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
segment_query <- .select_segments(input$segmentsOut, type = "text")
query <- paste0(
"SELECT query_name, published ", segment_query, " FROM 'articles' ", date_query, type_query, ";"
)
query
published <- dbGetQuery(pool, query)
published <- DBI::dbGetQuery(pool, query)
head(published)
query <- paste0(
"SELECT published, ", segment_query, " FROM 'articles' ", date_query, type_query, ";"
)
published <- dbGetQuery(pool, query)
published <- DBI::dbGetQuery(pool, query)
head(published)
tidyr::spread(published)
tidyr::spread(rose_text_segment, white_text_segment)
tidyr::spread(published, rose_text_segment, white_text_segment)
tidyr::spread(published, published)
tidyr::spread(published, published, value)
?tidyr::spread
head(published)
tidyr::spread(published, published, rose_text_segment)
tidyr::spread(published, published, value)
tidyr::spread(published, published)
tidyr::spread(published, dplyr::contains("text_segment"))
tidyr::spread(published, dplyr::contains("text_segment"), published)
published %>%
select(contains("text_segment"))
published %>%
select(contains("text_segment")) %>%
head
tidyr::spread(published, published, dplyr::contains("text_segment"))
tidyr::spread(published, published)
head(published)
published %>%
tidyr::spread(
published
)
published %>%
tidyr::gather(
published
)
published %>%
tidyr::gather(
published
) %>%
head
published %>%
tidyr::gather(
published,
published
) %>%
head
published %>%
tidyr::gather(
published
) %>%
head
published %>%
tidyr::gather(
published,
value
) %>%
head
published %>%
tidyr::gather(
dplyr::contains("text_")
) %>%
head
published %>%
tidyr::gather(
published
) %>%
head
head(published)
published %>%
tidyr::gather(
rose_text_segment,
white_text_segment
) %>%
head
published %>%
tidyr::gather(
published
) %>%
head
published %>%
group_by(published) %>%
tidyr::gather(
published
) %>%
head
published %>%
tidyr::gather(
published
) %>%
head
published %>%
tidyr::gather(
published,
-published
) %>%
head
published %>%
tidyr::gather(
published,
published
) %>%
head
published %>%
tidyr::gather(
published
) %>%
head
published %>%
tidyr::gather(
published,
date
) %>%
head
published %>%
tidyr::gather(
key,
value,
published
) %>%
head
head(published)
published %>%
tidyr::gather(
segment,
value,
rose_text_segment,
white_text_segment
) %>%
head
published %>%
tidyr::gather(
segment,
value,
contains("text_")
) %>%
head
published %>%
mutate(
published = as.POSIXct(published, origin = "1970-01-01"),
published = as.Date(published)
) %>%
count(contains("text"), published)
published %>%
mutate(
published = as.POSIXct(published, origin = "1970-01-01"),
published = as.Date(published)
) %>%
tidyr::gather(
segment,
value,
contains("text_")
)
published %>%
mutate(
published = as.POSIXct(published, origin = "1970-01-01"),
published = as.Date(published)
) %>%
tidyr::gather(
segment,
value,
contains("text_")
) %>%
head
published %>%
mutate(
published = as.POSIXct(published, origin = "1970-01-01"),
published = as.Date(published)
) %>%
tidyr::gather(
segment,
value,
contains("text_")
) %>%
group_by_(published, segment) %>%
summarise(n = sum(value)) %>%
ungroup()
published %>%
mutate(
published = as.POSIXct(published, origin = "1970-01-01"),
published = as.Date(published)
) %>%
tidyr::gather(
segments,
value,
contains("text_")
)
published %>%
mutate(
published = as.POSIXct(published, origin = "1970-01-01"),
published = as.Date(published)
) %>%
tidyr::gather(
segments,
value,
contains("text_")
) %>%
head
published %>%
mutate(
published = as.POSIXct(published, origin = "1970-01-01"),
published = as.Date(published)
) %>%
tidyr::gather(
segments,
value,
contains("text_")
) %>%
group_by(published, segments) %>%
summarise(n = sum(value)) %>%
ungroup()
published %>%
mutate(
published = as.POSIXct(published, origin = "1970-01-01"),
published = as.Date(published)
) %>%
tidyr::gather(
segments,
value,
contains("text_")
) %>%
group_by(published, segments) %>%
summarise(n = sum(value)) %>%
group_by(segments) %>%
e_charts(published) %>%
e_line(n)
input$segmentsOut
devtools::document()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
