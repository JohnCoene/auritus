summarise(value = sum(value)) %>%
ungroup() %>%
left_join(
total, b = "segments"
) %>%
mutate(
value = value / total
) %>%
mutate(value = round(value * 100, 2))
head(dat)
dat %>%
select(
-one_of("text_")
) %>%
tidyr::gather(
segments,
value,
contains("1p_")
) %>%
mutate(
segments = gsub("_1p_segment", "", segments),
segments = tools::toTitleCase(segments)
) %>%
group_by(segments) %>%
summarise(value = sum(value)) %>%
ungroup() %>%
left_join(
total, b = "segments"
) %>%
mutate(
value = value / total
) %>%
mutate(value = round(value * 100, 2))
dat %>%
select(
-contains("text_")
) %>%
tidyr::gather(
segments,
value,
contains("1p_")
) %>%
mutate(
segments = gsub("_1p_segment", "", segments),
segments = tools::toTitleCase(segments)
) %>%
group_by(segments) %>%
summarise(value = sum(value)) %>%
ungroup() %>%
left_join(
total, b = "segments"
) %>%
mutate(
value = value / total
) %>%
mutate(value = round(value * 100, 2))
dat %>%
select(
-contains("text_")
) %>%
tidyr::gather(
segments,
value,
contains("1p_")
) %>%
head
total <- dat %>%
tidyr::gather(
segments,
value,
contains("text_")
) %>%
mutate(
published = as.POSIXct(published, origin = "1970-01-01"),
published = as.Date(published),
segments = gsub("_text_segment", "", segments),
segments = tools::toTitleCase(segments)
) %>%
group_by(published, segments) %>%
summarise(total = sum(value))
dat %>%
select(
-contains("text_")
) %>%
tidyr::gather(
segments,
value,
contains("1p_")
) %>%
mutate(
published = as.POSIXct(published, origin = "1970-01-01"),
published = as.Date(published),
segments = gsub("_1p_segment", "", segments),
segments = tools::toTitleCase(segments)
) %>%
group_by(published, segments) %>%
summarise(value = sum(value)) %>%
ungroup() %>%
left_join(
total, b = "segments"
) %>%
mutate(
value = value / total
) %>%
mutate(value = round(value * 100, 2))
total <- dat %>%
tidyr::gather(
segments,
value,
contains("text_")
) %>%
mutate(
segments = gsub("_text_segment", "", segments),
segments = tools::toTitleCase(segments)
) %>%
group_by(segments) %>%
summarise(total = sum(value))
dat %>%
select(
-contains("text_")
) %>%
tidyr::gather(
segments,
value,
contains("1p_")
) %>%
mutate(
published = as.POSIXct(published, origin = "1970-01-01"),
published = as.Date(published),
segments = gsub("_1p_segment", "", segments),
segments = tools::toTitleCase(segments)
) %>%
group_by(published, segments) %>%
summarise(value = sum(value)) %>%
ungroup() %>%
left_join(
total, b = "segments"
) %>%
mutate(
value = value / total
) %>%
mutate(value = round(value * 100, 2))
library(auritus)
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
names(dat)
names(df)
head(df)
launch_auritus()
base_query <- "SELECT thread_site, COUNT(thread_site) AS n FROM articles"
DBI::dbGetQuery(pool, query)
DBI::dbGetQuery(pool, query) -> x
head(x)
pool::poolClose(pool)
pool::poolClose(pool)
pool <- pool::dbPool(RSQLite::SQLite(), dbname = "articles")
base_query <- "SELECT thread_site, COUNT(thread_site) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(base_query, date_query, type_query, ";")
query
DBI::dbGetQuery(pool, query)Mhead
DBI::dbGetQuery(pool, query) %>% head()
DBI::dbGetQuery(pool, query) %>% head()
base_query <- "SELECT thread_site, COUNT(thread_site) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(base_query, date_query, type_query,
"GROUP BY thread_site_type ORDER BY count(thread_site_type) DESC;")
N <- dbGetQuery(pool, query)
DBI::dbGetQuery(pool, query) %>% head()
DBI::dbGetQuery(pool, query)
base_query <- "SELECT thread_site, COUNT(thread_site) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(base_query, date_query, type_query,
"GROUP BY thread_site ORDER BY count(thread_site) DESC;")
DBI::dbGetQuery(pool, query)
base_query <- "SELECT thread_site, COUNT(thread_site) AS n FROM articles"
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
query <- paste(base_query, date_query, type_query,
"GROUP BY thread_site  HAVING COUNT(thread_site) > 1 ORDER BY count(thread_site) DESC;")
DBI::dbGetQuery(pool, query)
N <- DBI::dbGetQuery(pool, query) %>%
mutate(
thread_site = gsub("\\..*", "", thread_site)
)
head(N)
library(echarts4r)
e_cloud()
`?e_cloud()
?e_cloud()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
devtools::document()
library(auritus)
launch_auritus()
names(dat)
names(df)
pool
pool <- pool::dbGetQuery(RSQLite::SQLite(), dbname = "articles")
pool <- pool::dbPool(RSQLite::SQLite(), dbname = "articles")
df <- DBI::dbGetQuery(pool, "SELECT * FROM articles LIMIT 100;")
names(df)
df$thread_url[1]
head(df$thread_site)
date_query <- .dates2query(input$daterangeOut)
type_query <- .type2query(input$sitetypesOut)
outlet_query <- paste0("AND thread_site IN('", sel, "')")
query <- paste0(
"SELECT thread_title, thread_url FROM 'articles' ", date_query, type_query, outlet_query, ";"
)
sel = "blogspot"
outlet_query <- paste0("AND thread_site IN('", sel, "')")
query <- paste0(
"SELECT thread_title, thread_url FROM 'articles' ", outlet_query, ";"
)
dat <- dbGetQuery(pool, query)
dat <- DBI::dbGetQuery(pool, query)
query
outlet_query <- paste0("WHERE thread_site IN('", sel, "')")
query <- paste0(
"SELECT thread_title, thread_url FROM 'articles' ", outlet_query, ";"
)
dat <- dbGetQuery(pool, query)
dat <- DBI::dbGetQuery(pool, query)
head(dat)
qquery
query
outlet_query <- paste0("WHERE thread_site LIKE '%", sel, "%')")
query <- paste0(
"SELECT thread_title, thread_url FROM 'articles' ",  outlet_query, ";"
)
dat <- dbGetQuery(pool, query)
dat <- DBI::dbGetQuery(pool, query)
outlet_query <- paste0("WHERE thread_site LIKE '%", sel, "%'")
query <- paste0(
"SELECT thread_title, thread_url FROM 'articles' ", outlet_query, ";"
)
dat <- DBI::dbGetQuery(pool, query)
head(dat)
names(df)
query <- paste0(
"SELECT thread_title, thread_url FROM 'articles' ",
outlet_query, " ORDER nwords DESC;"
)
dat <- dbGetQuery(pool, query)
dat <- DBI::dbGetQuery(pool, query)
query
query <- paste0(
"SELECT thread_title, thread_url FROM 'articles' ",
outlet_query, " ORDER BY nwords DESC;"
)
dat <- dbGetQuery(pool, query)
library(DBI)
dat <- dbGetQuery(pool, query)
head(dat)
query <- paste0(
"SELECT thread_title, thread_url FROM 'articles' ",
date_query, type_query, outlet_query, " ORDER BY topmedia DESC;"
)
dat <- dbGetQuery(pool, query)
query <- paste0(
"SELECT thread_title, thread_url FROM 'articles' ",
outlet_query, " ORDER BY topmedia DESC;"
)
dat <- dbGetQuery(pool, query)
head(dat)
map(dat, length)
purrr::map(dat, length)
head(df$thread_main_image)
names(df)
pool::poolClose(pool)
devtools::document()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
names(df)
cl <- paste0("label label-", col)
devtools::document()
library(auritus)
launch_auritus()
names(df)
devtools::document()
library(auritus)
launch_auritus()
library(auritus)
launch_auritus()
launch_auritus()
devtools::document()
library(auritus)
launch_auritus()
query <- paste0(
"SELECT thread_main_image, thread_title, thread_url FROM 'articles' ",
date_query, type_query, outlet_query, " ORDER BY topmedia DESC;"
)
query
names(df)
devtools::document()
library(auritus)
launch_auritus()
setup_auritus()
launch_auritus()
library(auritus)
launch_auritus()
devtools::document()
library(auritus)
library(auritus)
launch_auritus()
pool <- pool::dbPool(RSQLite::SQLite(), dbname = "articles")
df <- pool::dbGetQuery(pool, "SELECT * FROM articles LIMIT 100;")
pool::poolClose(pool)
names(df)
head(df$entities_organizations)
df %>%
tidyr::separate_rows(entities_organizations, sep = ",") %>%
head
df %>%
tidyr::separate_rows(entities_organizations, sep = ",") %>%
count(entities_organizations, sort = T)
library(dplyr)
df %>%
tidyr::separate_rows(entities_organizations, sep = ",") %>%
count(entities_organizations, sort = T)
df %>%
tidyr::separate_rows(entities_persons, sep = ",") %>%
count(entities_organizations, sort = T)
df %>%
tidyr::separate_rows(entities_persons, sep = ",") %>%
count(entities_persons, sort = T)
df %>%
tidyr::separate_rows(entities_locations, sep = ",") %>%
count(entities_locations, sort = T)
df %>%
tidyr::separate_rows(entities_locations, sep = ",") %>%
count(entities_locations, sort = T)
devtools::document()
library(auritus)
launch_auritus()
devtools::document()
library(auritus)
launch_auritus()
?webhoser::wh_news
devtools::document()
library(auritus)
devtools::document()
devtools::check()
library(auritus)
setup_auritus(pages = 2)
launch_auritus()
devtools::document()
library(auritus)
setup_auritus(pages = 2)
launch_auritus()
crawl_data()
launch_auritus()
library(auritus)
launch_auritus()
as.POSIXct("30-03-2018")
as.POSIXct("2018-03-30")
as.POSIXct("2018-03-30 09:16:28")
as.POSIXct("2018-03-30 09:16:28") -> x
as.numeric(x)
as.numeric(x) * 1000
options(scipen = 12)
as.numeric(x) * 1000
as.numeric(x) / 1000
as.numeric()
as.numeric(x)
as.POSIXct("2018-03-30 09:16:28 GMT") -> x
x
as.numeric(x)
as.POSIXct("2017-03-30 09:16:28 GMT") -> x
x
as.numeric(x)
devtools::document()
library(auritus)
devtools::document()
library(auritus)
crawl_data(pages = 2)
devtools::document()
library(auritus)
setup_auritus()
setup_auritus(pages = 3)
crawl_data()
as.numeric(Sys.time())
as.numeric(Sys.Date())
library(auritus)
setup_auritus()
launch_auritus()
devtools::document()
library(auritus)
setup_auritus()
crawl_data(pages = 3)
crawl_data(pages = 50)
as.numeric(x)
paste0("crawled:>", as.numeric(Sys.time()), "000")
as.numeric(Sys.time())
paste0(as.numeric(Sys.time()))
library(auritus)
library(auritus)
x <- Sys.time()
as.numeric(x)
paste(as.numeric(x))
paste(as.character(as.numeric(x)))
(x <- as.numeric(Sys.time()))
paste(x)
paste(as.character(x))
paste0("crawled:>", as.character(as.numeric(Sys.time())), "000")
as.integer(Sys.time())
paste0("crawled:>", as.character(as.integer(Sys.time())), "000")
x <- as.numeric(Sys.time())
(x <- as.numeric(Sys.time()))
paste(x)
(x <- as.integer(Sys.time()))
paste(x)
(x <- Sys.time())
as.numeric(x)
paste(as.numeric(x))
paste(as.integer(x))
library(auritus)
devtools::document()
library(auritus)
setup_auritus(pages = 2)
pool <- pool::dbPool(RSQLite::SQLite(), dbname = "articles")
ts_query <- tryCatch(
dbGetQuery(con, "SELECT MAX(crawled) FROM 'articles';"),
error = function(e) e
)
ts_query <- tryCatch(
dbGetQuery(pool, "SELECT MAX(crawled) FROM 'articles';"),
error = function(e) e
)
ts_query
ts_query <- tryCatch(
DBI::dbGetQuery(pool, "SELECT MAX(crawled) FROM 'articles';"),
error = function(e) e
)
ts_query
crawled <- paste0("crawled:>", as.character(as.integer(ts_query)), "000")
crawled
crawled <- paste0("crawled:>", as.character(as.integer(ts_query[[1]])), "000")
ts_query[[1]]
class(ts_query[[1]])
ts_query <- tryCatch(
DBI::dbGetQuery(pool, "SELECT MAX(crawled) FROM 'articles';"),
error = function(e) e
)
class(ts_query[[1]])
ts_query[[1]]
as.POSIXct(ts_query[[1]], origin = "1970-01-01 12:00")
if(inherits(ts_query, "numeric") || inherits(ts_query, "character"))
ts_query[[1]] <- as.POSIXct(ts_query[[1]], origin = "1970-01-01 12:00")
ts_query[[1]]
crawled <- paste0("crawled:>", as.character(as.integer(ts_query[[1]])), "000")
ts_query <- tryCatch(
DBI::dbGetQuery(pool, "SELECT MAX(crawled) FROM 'articles';"),
error = function(e) e
)
ts_query
ts_query <- tryCatch(
DBI::dbGetQuery(pool, "SELECT MAX(crawled) AS max FROM 'articles';") %>% pull(max),
error = function(e) e
)
ts_query
ts_query <- tryCatch(
DBI::dbGetQuery(pool, "SELECT MAX(crawled) AS max FROM 'articles';") %>% dplyr::pull(max),
error = function(e) e
)
ts_query
inherits(ts_query, "numeric") || inherits(ts_query, "character")
ts_query <- as.POSIXct(ts_query, origin = "1970-01-01 12:00")
crawled <- paste0("crawled:>", as.character(as.integer(ts_query)), "000")
crawled
devtools::document()
library(auritus)
setup_auritus(pages = 1)
crawl_data()
launch_auritus()
ts_query <- tryCatch(
DBI::dbGetQuery(pool, "SELECT MAX(crawled) AS max FROM 'articles';") %>% dplyr::pull(max),
error = function(e) e
)
ts_query
library(auritus)
devtools::document()
library(auritus)
setup_auritus()
setup_auritus(pages = 2)
launch_auritus()
crawl_data(pages = 50)
launch_auritus()
library(auritus)
setup_auritus()
cat(crayon::black(cli::symbol$pointer), "hasd")
cat(crayon::blue(cli::symbol$pointer), "hasd")
devtools::document()
library(auritus)
setup_auritus()
launch_auritus()
